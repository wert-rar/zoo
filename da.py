# py3.8 wertrar
from collections import deque


def bfs(start, goal, graph):
    queue = deque([start])
    visited = {start: None}
    while queue:
        cur = queue.popleft()
        if cur == goal:
            break
        nexts = graph[cur]
        for next_n in nexts:
            if next_n not in visited:
                queue.append(next_n)
                visited[next_n] = cur
    return visited


def find_path(st, end, graph):
    visited = bfs(st, end, graph)

    print(f'путь из  {st} в {end}\n {st}', end=' ')
    cur = end
    p = []
    while cur != st:
        p.append(cur)
        cur = visited[cur]
    for v in reversed(p):
        print('-->', v, end=' ')


graph = {
    '1': ['2', '43', '46', '62'],
    '2': ['6', '22'],
    '3': ['6', '15', '34', '36', '37', '55'],
    '4': ['3', '36', '90'],
    '5': ['4', '23', '43', '52', '75', '90'],
    '6': ['1', '7', '41', '64', '65', '99'],
    '7': ['8', '49', '55', '83'],
    '8': ['9', '15', '25', '49', '65', '70'],
    '9': ['10', '59', '66', '85'],
    '10': ['11', '54', '95', '98'],
    '11': ['12', '14', '90'],
    '12': ['9', '15', '27'],
    '13': ['15', '35', '40', '70'],
    '14': ['4', '15', '30', '86'],
    '15': ['5', '7', '1', '22', '58', '75'],
    '16': ['7', '17', '24', '27', '34', '76', '83'],
    '17': ['18', '20'],
    '18': ['19', '29'],
    '19': ['20', '25', '36', '58', '79', '84', '97'],
    '20': ['15', '21', '86', '91'],
    '21': ['16', '27', '40', '43', '63'],
    '22': ['16', '19', '20', '21', '25', '94'],
    '23': ['12', '78', '95', '98'],
    '24': ['2', '14', '56', '69', '86', '93', '95'],
    '25': ['15'],
    '26': ['18', '45', '46', '56'],
    '27': ['5', '32', '39', '39', '60', '92', '93'],
    '28': ['27', '41'],
    '29': ['25', '28', '40', '65'],
    '30': ['12', '20', '31', '59', '67', '89', '90'],
    '31': ['33', '39', '49', '70', '77', '95'],
    '32': ['10', '14'],
    '33': ['3', '47', '58', '58', '62', '84', '98'],
    '34': ['4', '16', '45', '61', '80', '93'],
    '35': ['16', '42'],
    '36': ['3', '33'],
    '37': ['1', '14', '19', '36', '66', '69'],
    '38': ['39', '55', '87'],
    '39': ['11', '54', '57'],
    '40': ['11', '13', '23', '27', '48'],
    '41': ['42', '66'],
    '42': ['2', '89'],
    '43': ['3', '9', '34', '46'],
    '44': ['3', '24', '26', '28', '58'],
    '45': ['1', '5', '41', '43', '71', '73', '82'],
    '46': ['19', '37', '39', '68', '72'],
    '47': ['6', '42', '48'],
    '48': ['3', '25', '49', '61'],
    '49': ['12', '27', '32', '56', '59', '92'],
    '50': ['60', '73'],
    '51': ['13', '37', '74', '75', '77', '93'],
    '52': ['8', '99'],
    '53': ['54', '68', '92', '93'],
    '54': ['54', '68', '92', '93'],
    '55': ['55', '87'],
    '56': ['100', '28', '4', '62', '68', '85', '94'],
    '57': ['40', '76', '77', '78', '81', '88'],
    '58': ['1', '10', '13', '3', '38', '45', '64'],
    '59': ['60', '67', '86'],
    '60': ['18', '21', '38', '45', '58'],
    '61': ['18', '53', '6', '6', '62', '73', '93'],
    '62': ['63', '70', '99'],
    '63': ['1', '33', '57', '88'],
    '64': ['29', '7', '88'],
    '65': ['50', '66', '77', '80'],
    '66': ['25', '57', '59', '79', '8', '80'],
    '67': ['45', '53', '60', '68', '97'],
    '68': ['34', '38', '41', '69'],
    '69': ['12', '19', '25', '52', '68', '81'],
    '70': ['2', '24', '42', '60', '66'],
    '71': ['30', '36', '60', '60'],
    '72': ['51', '73'],
    '73': ['', '19', '26', '70', '94', '97'],
    '74': ['23', '31'],
    '75': ['35', '57', '83', '87'],
    '76': ['2', '23', '48', '55', '79', '96'],
    '77': ['42', '66', '72', '73'],
    '78': ['44', '53', '79', '91'],
    '79': ['2', '24', '3', '60', '69', '73', '87'],
    '80': ['16', '81'],
    '81': ['18', '18', '26', '32', '34', '45', '92'],
    '82': ['2', '77', '79', '80'],
    '83': ['21', '48', '6', '73', '93'],
    '84': ['2', '20', '25', '26', '28', '39'],
    '85': ['25', '3', '41', '54', '92'],
    '86': ['54', '6', '66'],
    '87': ['57', '61', '7', '80', '88'],
    '88': ['23', '76', '76', '87', '90', '95', '96'],
    '89': ['19', '25', '74', '96'],
    '90': ['28', '4', '46', '53', '59', '61'],
    '91': ['64', '72'],
    '92': ['17', '26', '67', '70', '76', '78', '9'],
    '93': ['100', '31', '40', '47', '73', '92'],
    '94': ['18', '27', '29', '42', '91', '51'],
    '95': ['62', '68', '79', '89', '96'],
    '96': ['21', '45', '9', '97'],
    '97': ['32', '82'],
    '98': ['39', '57'],
    '99': ['18', '18', '29', '36', '37', '47', '7', '79'],
    '100': ['17', '28', '44', '48', '49', '69'],
}

st = int(input('введите номер  текущей локации\n>>'))
end = int(input('введите номер конечной локации\n>>'))
if (st < 1 or st > 100) and (end < 1 or end > 100) :
    print('номер должен быть в диапозоне от 1 до 100')
else:
    find_path(str(st), str(end), graph)

